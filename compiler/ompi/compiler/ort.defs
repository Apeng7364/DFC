/*
  OMPi OpenMP Compiler
  == Copyright since 2001 the OMPi Team
  == Dept. of Computer Science & Engineering, University of Ioannina

  This file is part of OMPi.

  OMPi is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  OMPi is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with OMPi; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef __RUNTIME_DEFS__
#define __RUNTIME_DEFS__

/*
 * Some definitions that should be included at the top of the AST.
 * They are taken from ort_prive.h
 */

char *rtlib_onoff =      /* Needed even if no omp pragma was found */
"\
int   ort_initialize(int*, char***, int, ...);\
void  ort_finalize(int);\
";

char *rtlib_defs =       /* Only needed when transforming code */
"#pragma omp declare target\n"
"/* Prototypes of functions used by the compiler in the generated code */\n"
"void  ort_execute_serial(void *(*func)(void *), void *shared);\n"
"void  ort_execute_parallel(void *(*func)(void *), void *shared, int num_threads,\n"
"                           int iscombined, int procbind_type);\n"
"\n"
"void *ort_get_thrpriv(void **key, int size, void *origvar);\n"
"void  ort_sglvar_allocate(void **dataptr, int size, void *initer);\n"
"void  ort_fence();\n"
"\n"
"/*\n"
" * From tasks.c\n"
" */\n"
"\n"
"void  ort_new_task(void *(*func)(void *arg), void *arg, int final, int untied);\n"
"void  ort_taskwait(int waitall);\n"
"int   ort_task_throttling(void);\n"
"void *ort_task_immediate_start(int final);\n"
"void  ort_task_immediate_end(void *tn);\n"
"void  ort_entering_taskgroup(void);\n"
"void  ort_leaving_taskgroup(void);\n"
"\n"
"/*\n"
" * From pools.c\n"
" */\n"
"\n"
"void *ort_taskenv_alloc(int size, void *(*task_func)(void *));\n"
"void  ort_taskenv_free(void *ptr, void *(*task_func)(void *));\n"
"\n"
"/* Atomic, critical, reduction, copyprivate and barrier */\n"
"void ort_atomic_begin();\n"
"void ort_atomic_end();\n"
"void ort_critical_begin(void **cl);\n"
"void ort_critical_end(void **cl);\n"
"void ort_reduction_begin(void **cl);\n"
"void ort_reduction_end(void **cl);\n"
"void ort_broadcast_private(int num, ...);\n"
"void ort_copy_private(int num, ...);\n"
"\n"
"/*\n"
" * From barrier.c\n"
" */\n"
"\n"
"int ort_barrier_me(void);\n"
"\n"
"/*\n"
" * From ort.c\n"
" */\n"
"\n"
"int ort_enable_cancel(int type);\n"
"int ort_check_cancel(int type);\n"
"\n"
"/*\n"
" * From worksharing.c\n"
" */\n"
"\n"
"/* Structure to optimize guided/dynamic schedules.\n"
" * We compute it once and reuse it in every call to ort_get_xxx_chunk().\n"
" * Such things are declared by the compiler (as void *), are initialized\n"
" * during ort_entering_for() and are utilized in every call to\n"
" * ort_get_xxx_chunk() (static schedules ignore this, though).\n"
" */\n"
"typedef struct _ort_gdopt_\n"
"{\n"
"	volatile int  *data;  /* Denotes the current iter of the loop */\n"
"	volatile void *lock;  /* Lock to access *data */\n"
"	int           nth;    /* # siblings */\n"
"	void          *me;    /* my info node */\n"
"} ort_gdopt_t;\n"
"\n"
"/* Workshare-related functions */\n"
"int  ort_mysingle(int hasnowait);\n"
"void ort_leaving_single();\n"
"void ort_entering_sections(int hasnowait, int numberofsections);\n"
"void ort_leaving_sections();\n"
"int  ort_get_section();\n"
"void ort_entering_for(int nowait, int hasordered, ort_gdopt_t *t);\n"
"int  ort_leaving_for();\n"
"void ort_ordered_begin();\n"
"void ort_ordered_end();\n"
"void ort_thischunk_range(int lb, int ub);\n"
"\n"
"/* For schedules support */\n"
"typedef int (*chunky_t)(int niters, int chunksize, int *fiter, int *liter,\n"
"                        int *extra, ort_gdopt_t *opt);\n"
"\n"
"int ort_num_iters(int num, long specs[][2], int *itp[]);\n"
"void ort_get_runtime_schedule_stuff(chunky_t *func, int *chunksize);\n"
"int  ort_get_guided_chunk(int niters, int chunksize, int *fiter, int *liter,\n"
"                          int *ignored, ort_gdopt_t *t);\n"
"int  ort_get_dynamic_chunk(int niters, int chunksize, int *fiter, int *liter,\n"
"                           int *ignored, ort_gdopt_t *t);\n"
"int  ort_get_runtimestatic_chunk(int niters, int chunksize,\n"
"                                 int *fiter, int *liter, int *chunkid, ort_gdopt_t *t);\n"
"int  ort_get_static_default_chunk(int niters, int *from, int *to);\n"
"\n"
"/*\n"
" * From target.c\n"
" */\n"
"void *ort_dev_gaddr        (void *local_address);\n"
"void *devrt_get_dev_address(void *local_address, unsigned long size);\n"
"\n"
"#pragma omp end declare target\n"
"void  ort_offload_kernel   (void *(*host_func)(void *), void *vars, void *declvars, char *kernel_filename_prefix, int device_num, ...);\n"
"void *ort_devdata_alloc    (unsigned long size, int device_num);\n"
"void  ort_devdata_free     (void *data, int device_num);\n"
"\n"
"void *ort_start_target_data(int tdvars, int device_num);\n"
"void  ort_end_target_data  (void *de);\n"
"void *ort_alloc_tdvar      (void *var, unsigned long size);\n"
"void  ort_init_tdvar       (void *var, unsigned long size);\n"
"void  ort_finalize_tdvar   (void *var, unsigned long size);\n"
"void  ort_read_tdvar       (void *var, unsigned long size, int device_num);\n"
"void  ort_write_tdvar      (void *var, unsigned long size, int device_num);\n"
"void *ort_get_vaddress     (void *var);\n"
"void  ort_call_decl_reg_func(void (**regfunc)(void));\n"
"void  ort_register_declvar (void *var, unsigned long size, const void *init);\n"
"void *ort_get_declvar      (void *var, int device_num);\n"
"void *__ompi_defs__;";

#endif